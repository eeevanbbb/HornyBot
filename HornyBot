#!/usr/bin/env python  

import argparse
import sys
import time
import random

import twitter
import schedule

#Prepend time to all log output (http://stackoverflow.com/questions/4883789/adding-a-datetime-stamp-to-python-print)
old_out = sys.stdout
class new_out:
    nl = True

    def write(self, x):
        """Write function overloaded."""
        if x == '\n':
            old_out.write(x)
            self.nl = True
        elif self.nl:
            old_out.write('[%s] %s' % (time.ctime(), x))
            self.nl = False
        else:
            old_out.write(x)
sys.stdout = new_out()

def format_error(e):
    return '(' + e.message + ')'

twitter_api = None
twitter_user = None

def config_twitter_api(twitter_file):
    twitter_keys = {}
    try:
        with open(twitter_file) as f:
            for line in f:
                name, var = line.split('=')
                twitter_keys[name.strip()] = var.strip()
    except IOError as e:
        sys.exit('Could not find twitter config file at: ' + twitter_file + format_error(e))

    consumer_key = twitter_keys.get('consumer_key')
    consumer_secret = twitter_keys.get('consumer_secret')
    access_key = twitter_keys.get('access_key')
    access_secret = twitter_keys.get('access_secret')

    if consumer_key == None:
        sys.exit('No consumer_key found in: ' + twitter_file)
    elif consumer_secret == None:
        sys.exit('No consumer_secret found in: ' + twitter_file)
    elif access_key == None:
        sys.exit('No access_key found in: ' + twitter_file)
    elif access_secret == None:
        sys.exit('No access_secret found in: ' + twitter_file)
    else:
        twitter_api = twitter.Api(consumer_key=consumer_key,
                                  consumer_secret=consumer_secret,
                                  access_token_key=access_key,
                                  access_token_secret=access_secret)
        try:
            twitter_user = twitter_api.VerifyCredentials()
        except twitter.TwitterError as e:
            sys.exit('Could not verify twitter credentials.' + format_error(e))

        if twitter_user == None:
            sys.exit('Could not verify twitter credentials.')
        else:
            print('Twitter credentials verified successfully.')


subjects = []

def load_subjects(subjects_file):
    try:
        with open(subjects_file) as f:
            for line in f:
                subjects.append(line.rstrip('\n'))
    except IOError as e:
        sys.exit('Could not find subjects file at: ' + subjects_file + format_error(e))
    print('Subjects loaded successfully. (' + str(len(subjects)) + ' subjects)')


def load_used(used_file):
    try:
        with open(used_file) as f:
            for line in f:
                subject = line.rstrip('\n')
                if subject in subjects:
                    subjects.remove(subject)
    except IOError as e:
        print('Could not find used subjects file at: ' + used_file + format_error(e))
    print('Used subjects removed from list. (' + str(len(subjects)) + ' subjects)')   


def verify_time(time):
    if len(time) != 5:
        return False
    hour, minute = time.split(':')
    try:
        hour_int = int(hour)
        minute_int = int(minute)
        return hour_int >= 0 and hour_int < 24 and minute_int >= 0 and minute_int < 60
    except ValueError:
        return False

schedule_times = []
def load_schedule(schedule_file):
    try:
        with open(schedule_file) as f:
            for line in f:
                time = line.rstrip('\n')
                if verify_time(time):
                    schedule_times.append(time)
                else:
                    print('Could not parse time: ' + time)
    except IOError as e:
        sys.exit('Could not find schedule file at: ' + schedule_file + format_error(e))
    print('Schedule loaded successfully. (' + str(len(schedule_times)) + ' times scheduled)')


def schedule_tasks():
    for time in schedule_times:
        schedule.every().day.at(time).do(post_next_tweet)
    print('Tasks scheduled successfully.')


used_file = ''
def add_subject_to_used_file(subject):
    try:
        with open(used_file, 'a') as f:
            f.write(subject + '\n')
    except IOError as e:
        print('WARNING: Could not write to used subjects file.' + format_error(e))


DEBUG_MODE = False
def post_next_tweet():
    try:
        subject = random.choice(subjects)
        tweet = subject + '-Horny'
        if not DEBUG_MODE:
            if twitter_api != None:
                try:
                    twitter_api.PostUpdate(tweet)
                except TwitterError as e:
                    print('WARNING: Unable to tweet: "' + tweet + '"' + format_error(e))
            else:
                print('WARNING: Unable to tweet: "' + tweet + '"')
        else:
            print('DEBUG: Would have tweeted: "' + tweet + '"')
        add_subject_to_used_file(subject)
        if len(subjects) == 0:
            sys.exit('Ran out of subjects.')
    except IndexError as e:
        sys.exit('No more subjects to tweet.' + format_error(e))

def begin_loop():
    print('Entering loop...')
    while True:
        schedule.run_pending()
        time.sleep(10)


if __name__ == '__main__':
    parser = argparse.ArgumentParser(description='Run HornyBot.')
    parser.add_argument('--subjects', dest='subjects_file', type=str, default='config/subjects.txt', help='The file containing things the bot is horny for, one per line (default: config/subjects.txt)')
    parser.add_argument('--twitter', dest='twitter_file', type=str, default='config/twitter.txt', help='The file containing the Twitter keys, one per line with the format key_name=key_value (default: config/twitter.txt)')
    parser.add_argument('--schedule', dest='schedule_file', type=str, default='config/schedule.txt', help='The file containing the times to post each day, one per line with the format HH:MM (default: config/schedule.txt)')
    parser.add_argument('--used', dest='used_file', type=str, default='config/used.txt', help='The file containing the subjects that have already been used, one per line (default: config/used.txt)')
    parser.add_argument('--debug', dest='debug', action='store_const', const=True, default=False, help='Ignore twitter config info, print tweets to the command line instead')
    args = parser.parse_args()

    DEBUG_MODE = args.debug

    if not DEBUG_MODE:
        config_twitter_api(args.twitter_file)

    load_subjects(args.subjects_file)

    used_file = args.used_file
    load_used(args.used_file)

    load_schedule(args.schedule_file)

    schedule_tasks()

    begin_loop()

